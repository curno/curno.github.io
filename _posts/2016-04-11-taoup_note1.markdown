---
layout: post
title: "UNIX为软件设计带来的启发"
description: "《Unix 编程艺术》 读书心得 (二)"
tags: Unix Linux Design
---

`UNIX`是设计良好的软件，本书讲述了关于`UNIX`设计很重要、很精髓的一些观点。这些观点不仅仅局限于`UNIX`开发，而且可以作为通用设计原则，也是通用软件设计非常珍贵的方法论。这些观点散落在不同的章节中，这里进行一些引文整理和评价。


### 紧凑性和正交性

> 紧凑性就是一个设计能否装进人脑中的特性。紧凑不等于“薄弱”，如果一个设计构建在易于理解且利于组合的抽象概念上，这个系统能在具有非常强大、灵活的功能的同时保持紧凑。合理对待紧凑性，设计中尽量考虑，绝不随意抛弃。

> 正交设计中，任何操作无副作用；每一个动作只改变一件事，不会影响其他。

紧凑性是对一个软件模块大小的很好的评判标准。一个良好软件模块应该是紧凑的，这样人们便易于理解。一旦一个软件模块所做的事情并不是*一件事*，而是多个事的不同方面，并且这些方面还交杂在一起，那么就是设计不良的。达到紧凑性的一个方法是*拆分*，将模块划分为独立的子块；但是更重要的是，达到紧凑性需要对这个模块面向的场景、要解决的问题抽取出良好的抽象和问题定义，这个抽象概念越明确，问题定义越精准，越有可能导致紧凑的设计。

正交性是评价模块和模块关系方面设计质量的标准之一。模块关系正交，意味着模块之间不互相影响，可以分别独立使用，并方便组合起来；这样的设计提高了模块复用；反之则是设计不良的。达到正交设计，同样需要明确场景，对模块进行精准的定义和划分，保证每个模块**做且只做好一件事情**，设计就趋向正交。

### SPOT原则

> **SPOT**即**S**ingle **P**oint **O**f **T**ruth、真理的单点性。

这可能是设计中最常应用，同时也是最容易见到违反场景的设计原则了。也有人称之为**DRY**（**D**ont **R**epeat **Y**ourself）原则。要对设计中的**重复**异常敏感，发现重复的代码、数据、资源等都考虑重构，方能趋于SPOT。

### 胶合层

> 实际代码往往是自顶向下和自底向上的综合产物。同一个项目中经常同时具有两者的代码，导致了“胶合层”的出现

> 胶合层是个挺讨厌的东西，必须尽可能薄。

> 如果设计者意识到胶合层的存在，并试图围绕自身的一套数据结构或者对象把胶合层组织成一个中间层，结果却导致两个胶合层。

设计中，胶合层是必要的，胶合层将不同的模块结合到一起，过厚的胶合层属于过度设计。良好的设计应该是**良好的模块+薄胶合层**。

> 所有的OO语言都显示出某种使程序员陷入过度分层陷阱的倾向。

> 如果程序员到来用复杂的办法来做简单的事情————仅仅是因为他们能够这样做，结果便适得其反。

这为OO程序员（包括我）提了个醒。由于客户端工作性质，OO是必不可少的。GUI也是少数几个OO取得巨大成功的领域。但是设计中要谨防OO带来的过度设计，特别是胶合层方面。

